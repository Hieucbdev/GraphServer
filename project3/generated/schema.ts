// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Collection extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collection entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Collection must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Collection", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Collection | null {
    return changetype<Collection | null>(
      store.get_in_block("Collection", id.toHexString()),
    );
  }

  static load(id: Bytes): Collection | null {
    return changetype<Collection | null>(
      store.get("Collection", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get totalAuctionCount(): i32 {
    let value = this.get("totalAuctionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalAuctionCount(value: i32) {
    this.set("totalAuctionCount", Value.fromI32(value));
  }

  get totalAuctionVolume(): BigInt {
    let value = this.get("totalAuctionVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAuctionVolume(value: BigInt) {
    this.set("totalAuctionVolume", Value.fromBigInt(value));
  }

  get auctionCollection(): AuctionCommonCollectionLoader {
    return new AuctionCommonCollectionLoader(
      "Collection",
      this.get("id")!.toBytes().toHexString(),
      "auctionCollection",
    );
  }
}

export class AuctionCommonCollection extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AuctionCommonCollection entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionCommonCollection must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AuctionCommonCollection", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AuctionCommonCollection | null {
    return changetype<AuctionCommonCollection | null>(
      store.get_in_block("AuctionCommonCollection", id),
    );
  }

  static load(id: string): AuctionCommonCollection | null {
    return changetype<AuctionCommonCollection | null>(
      store.get("AuctionCommonCollection", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get auctionType(): i64 {
    let value = this.get("auctionType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set auctionType(value: i64) {
    this.set("auctionType", Value.fromI64(value));
  }

  get collection(): Bytes {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set collection(value: Bytes) {
    this.set("collection", Value.fromBytes(value));
  }

  get auctionCount(): i32 {
    let value = this.get("auctionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set auctionCount(value: i32) {
    this.set("auctionCount", Value.fromI32(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }
}

export class AuctionCommon extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionCommon entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionCommon must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AuctionCommon", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AuctionCommon | null {
    return changetype<AuctionCommon | null>(
      store.get_in_block("AuctionCommon", id),
    );
  }

  static load(id: string): AuctionCommon | null {
    return changetype<AuctionCommon | null>(store.get("AuctionCommon", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get auctionCount(): i32 {
    let value = this.get("auctionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set auctionCount(value: i32) {
    this.set("auctionCount", Value.fromI32(value));
  }

  get collectionCount(): i32 {
    let value = this.get("collectionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set collectionCount(value: i32) {
    this.set("collectionCount", Value.fromI32(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get creatorCount(): i32 {
    let value = this.get("creatorCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set creatorCount(value: i32) {
    this.set("creatorCount", Value.fromI32(value));
  }

  get creatorList(): Array<Bytes> {
    let value = this.get("creatorList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set creatorList(value: Array<Bytes>) {
    this.set("creatorList", Value.fromBytesArray(value));
  }

  get collectionList(): Array<Bytes> {
    let value = this.get("collectionList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set collectionList(value: Array<Bytes>) {
    this.set("collectionList", Value.fromBytesArray(value));
  }
}

export class AuctionDetail extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionDetail entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AuctionDetail must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AuctionDetail", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AuctionDetail | null {
    return changetype<AuctionDetail | null>(
      store.get_in_block("AuctionDetail", id.toHexString()),
    );
  }

  static load(id: Bytes): AuctionDetail | null {
    return changetype<AuctionDetail | null>(
      store.get("AuctionDetail", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get auctionType(): i64 {
    let value = this.get("auctionType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set auctionType(value: i64) {
    this.set("auctionType", Value.fromI64(value));
  }

  get auctionCreator(): Bytes {
    let value = this.get("auctionCreator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set auctionCreator(value: Bytes) {
    this.set("auctionCreator", Value.fromBytes(value));
  }

  get hash(): Bytes {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes) {
    this.set("hash", Value.fromBytes(value));
  }

  get status(): i32 {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set status(value: i32) {
    this.set("status", Value.fromI32(value));
  }

  get collectionAddress(): Array<Bytes> {
    let value = this.get("collectionAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set collectionAddress(value: Array<Bytes>) {
    this.set("collectionAddress", Value.fromBytesArray(value));
  }

  get nftIds(): Array<BigInt> {
    let value = this.get("nftIds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set nftIds(value: Array<BigInt>) {
    this.set("nftIds", Value.fromBigIntArray(value));
  }

  get nftCount(): Array<BigInt> {
    let value = this.get("nftCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set nftCount(value: Array<BigInt>) {
    this.set("nftCount", Value.fromBigIntArray(value));
  }

  get trade(): TradeLoader {
    return new TradeLoader(
      "AuctionDetail",
      this.get("id")!.toBytes().toHexString(),
      "trade",
    );
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get minimumPrice(): BigInt {
    let value = this.get("minimumPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minimumPrice(value: BigInt) {
    this.set("minimumPrice", Value.fromBigInt(value));
  }

  get startingPrice(): BigInt {
    let value = this.get("startingPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startingPrice(value: BigInt) {
    this.set("startingPrice", Value.fromBigInt(value));
  }

  get stepDuration(): BigInt {
    let value = this.get("stepDuration");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stepDuration(value: BigInt) {
    this.set("stepDuration", Value.fromBigInt(value));
  }

  get paymentToken(): Bytes {
    let value = this.get("paymentToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set paymentToken(value: Bytes) {
    this.set("paymentToken", Value.fromBytes(value));
  }

  get isEnded(): boolean {
    let value = this.get("isEnded");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isEnded(value: boolean) {
    this.set("isEnded", Value.fromBoolean(value));
  }

  get currentBidder(): Bytes {
    let value = this.get("currentBidder");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set currentBidder(value: Bytes) {
    this.set("currentBidder", Value.fromBytes(value));
  }

  get currentBid(): BigInt {
    let value = this.get("currentBid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentBid(value: BigInt) {
    this.set("currentBid", Value.fromBigInt(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }

  get remainingBidTime(): BigInt {
    let value = this.get("remainingBidTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set remainingBidTime(value: BigInt) {
    this.set("remainingBidTime", Value.fromBigInt(value));
  }

  get remainingRevealTime(): BigInt {
    let value = this.get("remainingRevealTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set remainingRevealTime(value: BigInt) {
    this.set("remainingRevealTime", Value.fromBigInt(value));
  }

  get revealBlockNum(): BigInt {
    let value = this.get("revealBlockNum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set revealBlockNum(value: BigInt) {
    this.set("revealBlockNum", Value.fromBigInt(value));
  }

  get bidStep(): BigInt {
    let value = this.get("bidStep");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bidStep(value: BigInt) {
    this.set("bidStep", Value.fromBigInt(value));
  }

  get revealStep(): BigInt {
    let value = this.get("revealStep");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set revealStep(value: BigInt) {
    this.set("revealStep", Value.fromBigInt(value));
  }

  get sndBid(): BigInt {
    let value = this.get("sndBid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sndBid(value: BigInt) {
    this.set("sndBid", Value.fromBigInt(value));
  }
}

export class Trade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trade entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Trade must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Trade", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Trade | null {
    return changetype<Trade | null>(store.get_in_block("Trade", id));
  }

  static load(id: string): Trade | null {
    return changetype<Trade | null>(store.get("Trade", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isWin(): boolean {
    let value = this.get("isWin");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isWin(value: boolean) {
    this.set("isWin", Value.fromBoolean(value));
  }

  get hash(): Array<Bytes> {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set hash(value: Array<Bytes>) {
    this.set("hash", Value.fromBytesArray(value));
  }

  get auctioneer(): Bytes {
    let value = this.get("auctioneer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set auctioneer(value: Bytes) {
    this.set("auctioneer", Value.fromBytes(value));
  }

  get bidder(): Bytes {
    let value = this.get("bidder");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set bidder(value: Bytes) {
    this.set("bidder", Value.fromBytes(value));
  }

  get price(): Array<BigInt> {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set price(value: Array<BigInt>) {
    this.set("price", Value.fromBigIntArray(value));
  }

  get auctionDetail(): Bytes {
    let value = this.get("auctionDetail");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set auctionDetail(value: Bytes) {
    this.set("auctionDetail", Value.fromBytes(value));
  }

  get timestamp(): Array<BigInt> {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set timestamp(value: Array<BigInt>) {
    this.set("timestamp", Value.fromBigIntArray(value));
  }
}

export class User extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type User must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): User | null {
    return changetype<User | null>(
      store.get_in_block("User", id.toHexString()),
    );
  }

  static load(id: Bytes): User | null {
    return changetype<User | null>(store.get("User", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get auctionOwnedCount(): i32 {
    let value = this.get("auctionOwnedCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set auctionOwnedCount(value: i32) {
    this.set("auctionOwnedCount", Value.fromI32(value));
  }

  get auctionBiddedCount(): i32 {
    let value = this.get("auctionBiddedCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set auctionBiddedCount(value: i32) {
    this.set("auctionBiddedCount", Value.fromI32(value));
  }

  get auctionVolume(): BigInt {
    let value = this.get("auctionVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set auctionVolume(value: BigInt) {
    this.set("auctionVolume", Value.fromBigInt(value));
  }

  get bidVolume(): BigInt {
    let value = this.get("bidVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bidVolume(value: BigInt) {
    this.set("bidVolume", Value.fromBigInt(value));
  }

  get auctionOwned(): AuctionDetailLoader {
    return new AuctionDetailLoader(
      "User",
      this.get("id")!.toBytes().toHexString(),
      "auctionOwned",
    );
  }

  get auctionBidded(): Array<Bytes> {
    let value = this.get("auctionBidded");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set auctionBidded(value: Array<Bytes>) {
    this.set("auctionBidded", Value.fromBytesArray(value));
  }

  get auctionOwnedStats(): AuctionOwnedUserLoader {
    return new AuctionOwnedUserLoader(
      "User",
      this.get("id")!.toBytes().toHexString(),
      "auctionOwnedStats",
    );
  }

  get trade(): TradeLoader {
    return new TradeLoader(
      "User",
      this.get("id")!.toBytes().toHexString(),
      "trade",
    );
  }

  get biddedCollection(): Array<Bytes> {
    let value = this.get("biddedCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set biddedCollection(value: Array<Bytes>) {
    this.set("biddedCollection", Value.fromBytesArray(value));
  }

  get ownedCollection(): Array<Bytes> {
    let value = this.get("ownedCollection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set ownedCollection(value: Array<Bytes>) {
    this.set("ownedCollection", Value.fromBytesArray(value));
  }
}

export class AuctionOwnedUser extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionOwnedUser entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionOwnedUser must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AuctionOwnedUser", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AuctionOwnedUser | null {
    return changetype<AuctionOwnedUser | null>(
      store.get_in_block("AuctionOwnedUser", id),
    );
  }

  static load(id: string): AuctionOwnedUser | null {
    return changetype<AuctionOwnedUser | null>(
      store.get("AuctionOwnedUser", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get auctionType(): i64 {
    let value = this.get("auctionType");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set auctionType(value: i64) {
    this.set("auctionType", Value.fromI64(value));
  }

  get auctionCount(): i32 {
    let value = this.get("auctionCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set auctionCount(value: i32) {
    this.set("auctionCount", Value.fromI32(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }
}

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("NFT", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NFT | null {
    return changetype<NFT | null>(store.get_in_block("NFT", id));
  }

  static load(id: string): NFT | null {
    return changetype<NFT | null>(store.get("NFT", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get auctionDetail(): Array<Bytes> {
    let value = this.get("auctionDetail");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set auctionDetail(value: Array<Bytes>) {
    this.set("auctionDetail", Value.fromBytesArray(value));
  }
}

export class AuctionCommonCollectionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): AuctionCommonCollection[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<AuctionCommonCollection[]>(value);
  }
}

export class TradeLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Trade[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Trade[]>(value);
  }
}

export class AuctionDetailLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): AuctionDetail[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<AuctionDetail[]>(value);
  }
}

export class AuctionOwnedUserLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): AuctionOwnedUser[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<AuctionOwnedUser[]>(value);
  }
}
